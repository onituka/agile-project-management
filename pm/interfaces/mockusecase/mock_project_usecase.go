// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/projectusecase/project.go

// Package mockusecase is a generated GoMock package.
package mockusecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	projectusecse "github.com/onituka/agile-project-management/project-management/usecase/projectusecase"
)

// MockProjectUsecase is a mock of ProjectUsecase interface.
type MockProjectUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockProjectUsecaseMockRecorder
}

// MockProjectUsecaseMockRecorder is the mock recorder for MockProjectUsecase.
type MockProjectUsecaseMockRecorder struct {
	mock *MockProjectUsecase
}

// NewMockProjectUsecase creates a new mock instance.
func NewMockProjectUsecase(ctrl *gomock.Controller) *MockProjectUsecase {
	mock := &MockProjectUsecase{ctrl: ctrl}
	mock.recorder = &MockProjectUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectUsecase) EXPECT() *MockProjectUsecaseMockRecorder {
	return m.recorder
}

// CreateProject mocks base method.
func (m *MockProjectUsecase) CreateProject(ctx context.Context, in *projectusecse.CreateProjectInput) (*projectusecse.CreateProjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", ctx, in)
	ret0, _ := ret[0].(*projectusecse.CreateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockProjectUsecaseMockRecorder) CreateProject(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockProjectUsecase)(nil).CreateProject), ctx, in)
}

// FetchProjectByID mocks base method.
func (m *MockProjectUsecase) FetchProjectByID(ctx context.Context, in *projectusecse.FetchProjectByIDInput) (*projectusecse.FetchProjectByIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProjectByID", ctx, in)
	ret0, _ := ret[0].(*projectusecse.FetchProjectByIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProjectByID indicates an expected call of FetchProjectByID.
func (mr *MockProjectUsecaseMockRecorder) FetchProjectByID(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProjectByID", reflect.TypeOf((*MockProjectUsecase)(nil).FetchProjectByID), ctx, in)
}

// FetchProjects mocks base method.
func (m *MockProjectUsecase) FetchProjects(ctx context.Context) (projectusecse.FetchProjectsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProjects", ctx)
	ret0, _ := ret[0].(projectusecse.FetchProjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProjects indicates an expected call of FetchProjects.
func (mr *MockProjectUsecaseMockRecorder) FetchProjects(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProjects", reflect.TypeOf((*MockProjectUsecase)(nil).FetchProjects), ctx)
}

// UpdateProject mocks base method.
func (m *MockProjectUsecase) UpdateProject(ctx context.Context, in *projectusecse.UpdateProjectInput) (*projectusecse.UpdateProjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", ctx, in)
	ret0, _ := ret[0].(*projectusecse.UpdateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockProjectUsecaseMockRecorder) UpdateProject(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockProjectUsecase)(nil).UpdateProject), ctx, in)
}
