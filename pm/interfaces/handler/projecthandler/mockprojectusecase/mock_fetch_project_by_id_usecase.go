// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/projectusecase/fetch_project_by_id_usecase.go

// Package mockprojectusecase is a generated GoMock package.
package mockprojectusecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	projectinput "github.com/onituka/agile-project-management/project-management/usecase/projectusecase/projectinput"
	projectoutput "github.com/onituka/agile-project-management/project-management/usecase/projectusecase/projectoutput"
)

// MockFetchProjectByIDUsecase is a mock of FetchProjectByIDUsecase interface.
type MockFetchProjectByIDUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockFetchProjectByIDUsecaseMockRecorder
}

// MockFetchProjectByIDUsecaseMockRecorder is the mock recorder for MockFetchProjectByIDUsecase.
type MockFetchProjectByIDUsecaseMockRecorder struct {
	mock *MockFetchProjectByIDUsecase
}

// NewMockFetchProjectByIDUsecase creates a new mock instance.
func NewMockFetchProjectByIDUsecase(ctrl *gomock.Controller) *MockFetchProjectByIDUsecase {
	mock := &MockFetchProjectByIDUsecase{ctrl: ctrl}
	mock.recorder = &MockFetchProjectByIDUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetchProjectByIDUsecase) EXPECT() *MockFetchProjectByIDUsecaseMockRecorder {
	return m.recorder
}

// FetchProjectByID mocks base method.
func (m *MockFetchProjectByIDUsecase) FetchProjectByID(ctx context.Context, in *projectinput.FetchProjectByIDInput) (*projectoutput.FetchProjectByIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProjectByID", ctx, in)
	ret0, _ := ret[0].(*projectoutput.FetchProjectByIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProjectByID indicates an expected call of FetchProjectByID.
func (mr *MockFetchProjectByIDUsecaseMockRecorder) FetchProjectByID(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProjectByID", reflect.TypeOf((*MockFetchProjectByIDUsecase)(nil).FetchProjectByID), ctx, in)
}
