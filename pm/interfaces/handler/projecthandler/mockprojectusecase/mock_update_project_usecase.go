// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/projectusecase/update_project_usecase.go

// Package mockprojectusecase is a generated GoMock package.
package mockprojectusecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	projectinput "github.com/onituka/agile-project-management/project-management/usecase/projectusecase/projectinput"
	projectoutput "github.com/onituka/agile-project-management/project-management/usecase/projectusecase/projectoutput"
)

// MockUpdateProjectUsecase is a mock of UpdateProjectUsecase interface.
type MockUpdateProjectUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateProjectUsecaseMockRecorder
}

// MockUpdateProjectUsecaseMockRecorder is the mock recorder for MockUpdateProjectUsecase.
type MockUpdateProjectUsecaseMockRecorder struct {
	mock *MockUpdateProjectUsecase
}

// NewMockUpdateProjectUsecase creates a new mock instance.
func NewMockUpdateProjectUsecase(ctrl *gomock.Controller) *MockUpdateProjectUsecase {
	mock := &MockUpdateProjectUsecase{ctrl: ctrl}
	mock.recorder = &MockUpdateProjectUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateProjectUsecase) EXPECT() *MockUpdateProjectUsecaseMockRecorder {
	return m.recorder
}

// UpdateProject mocks base method.
func (m *MockUpdateProjectUsecase) UpdateProject(ctx context.Context, in *projectinput.UpdateProjectInput) (*projectoutput.UpdateProjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", ctx, in)
	ret0, _ := ret[0].(*projectoutput.UpdateProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockUpdateProjectUsecaseMockRecorder) UpdateProject(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockUpdateProjectUsecase)(nil).UpdateProject), ctx, in)
}
