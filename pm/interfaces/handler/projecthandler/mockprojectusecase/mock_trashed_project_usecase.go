// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/projectusecase/trashed_project_usecase.go

// Package mockprojectusecase is a generated GoMock package.
package mockprojectusecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	projectusecase "github.com/onituka/agile-project-management/project-management/usecase/projectusecase"
)

// MockTrashedProjectUsecase is a mock of TrashedProjectUsecase interface.
type MockTrashedProjectUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockTrashedProjectUsecaseMockRecorder
}

// MockTrashedProjectUsecaseMockRecorder is the mock recorder for MockTrashedProjectUsecase.
type MockTrashedProjectUsecaseMockRecorder struct {
	mock *MockTrashedProjectUsecase
}

// NewMockTrashedProjectUsecase creates a new mock instance.
func NewMockTrashedProjectUsecase(ctrl *gomock.Controller) *MockTrashedProjectUsecase {
	mock := &MockTrashedProjectUsecase{ctrl: ctrl}
	mock.recorder = &MockTrashedProjectUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrashedProjectUsecase) EXPECT() *MockTrashedProjectUsecaseMockRecorder {
	return m.recorder
}

// TrashedProject mocks base method.
func (m *MockTrashedProjectUsecase) TrashedProject(ctx context.Context, in *projectusecase.TrashedProjectIDInput) (*projectusecase.TrashedProjectOutPut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrashedProject", ctx, in)
	ret0, _ := ret[0].(*projectusecase.TrashedProjectOutPut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrashedProject indicates an expected call of TrashedProject.
func (mr *MockTrashedProjectUsecaseMockRecorder) TrashedProject(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrashedProject", reflect.TypeOf((*MockTrashedProjectUsecase)(nil).TrashedProject), ctx, in)
}
