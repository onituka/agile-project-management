// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/projectnoteusecase/delete_project_note_usecase.go

// Package mockprojectnoteusecase is a generated GoMock package.
package mockprojectnoteusecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	projectnoteinput "github.com/onituka/agile-project-management/project-management/usecase/projectnoteusecase/projectnoteinput"
)

// MockDeleteProjectNoteUsecase is a mock of DeleteProjectNoteUsecase interface.
type MockDeleteProjectNoteUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteProjectNoteUsecaseMockRecorder
}

// MockDeleteProjectNoteUsecaseMockRecorder is the mock recorder for MockDeleteProjectNoteUsecase.
type MockDeleteProjectNoteUsecaseMockRecorder struct {
	mock *MockDeleteProjectNoteUsecase
}

// NewMockDeleteProjectNoteUsecase creates a new mock instance.
func NewMockDeleteProjectNoteUsecase(ctrl *gomock.Controller) *MockDeleteProjectNoteUsecase {
	mock := &MockDeleteProjectNoteUsecase{ctrl: ctrl}
	mock.recorder = &MockDeleteProjectNoteUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteProjectNoteUsecase) EXPECT() *MockDeleteProjectNoteUsecaseMockRecorder {
	return m.recorder
}

// DeleteProjectNote mocks base method.
func (m *MockDeleteProjectNoteUsecase) DeleteProjectNote(ctx context.Context, in *projectnoteinput.DeleteProjectNoteInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectNote", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProjectNote indicates an expected call of DeleteProjectNote.
func (mr *MockDeleteProjectNoteUsecaseMockRecorder) DeleteProjectNote(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectNote", reflect.TypeOf((*MockDeleteProjectNoteUsecase)(nil).DeleteProjectNote), ctx, in)
}
