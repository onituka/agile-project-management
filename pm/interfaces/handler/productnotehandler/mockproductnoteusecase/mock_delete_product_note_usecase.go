// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/productnoteusecase/delete_product_note_usecase.go

// Package mockproductnoteusecase is a generated GoMock package.
package mockproductnoteusecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	productnoteinput "github.com/onituka/agile-project-management/project-management/usecase/productnoteusecase/productnoteinput"
)

// MockDeleteProductNoteUsecase is a mock of DeleteProductNoteUsecase interface.
type MockDeleteProductNoteUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteProductNoteUsecaseMockRecorder
}

// MockDeleteProductNoteUsecaseMockRecorder is the mock recorder for MockDeleteProductNoteUsecase.
type MockDeleteProductNoteUsecaseMockRecorder struct {
	mock *MockDeleteProductNoteUsecase
}

// NewMockDeleteProductNoteUsecase creates a new mock instance.
func NewMockDeleteProductNoteUsecase(ctrl *gomock.Controller) *MockDeleteProductNoteUsecase {
	mock := &MockDeleteProductNoteUsecase{ctrl: ctrl}
	mock.recorder = &MockDeleteProductNoteUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteProductNoteUsecase) EXPECT() *MockDeleteProductNoteUsecaseMockRecorder {
	return m.recorder
}

// DeleteProductNote mocks base method.
func (m *MockDeleteProductNoteUsecase) DeleteProductNote(ctx context.Context, in *productnoteinput.DeleteProductNoteInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductNote", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductNote indicates an expected call of DeleteProductNote.
func (mr *MockDeleteProductNoteUsecaseMockRecorder) DeleteProductNote(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductNote", reflect.TypeOf((*MockDeleteProductNoteUsecase)(nil).DeleteProductNote), ctx, in)
}
