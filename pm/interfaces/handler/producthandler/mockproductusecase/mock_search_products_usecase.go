// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/productusecase/search_products_usecase.go

// Package mockproductusecase is a generated GoMock package.
package mockproductusecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	productinput "github.com/onituka/agile-project-management/project-management/usecase/productusecase/productinput"
	productoutput "github.com/onituka/agile-project-management/project-management/usecase/productusecase/productoutput"
)

// MockSearchProductsUsecase is a mock of SearchProductsUsecase interface.
type MockSearchProductsUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSearchProductsUsecaseMockRecorder
}

// MockSearchProductsUsecaseMockRecorder is the mock recorder for MockSearchProductsUsecase.
type MockSearchProductsUsecaseMockRecorder struct {
	mock *MockSearchProductsUsecase
}

// NewMockSearchProductsUsecase creates a new mock instance.
func NewMockSearchProductsUsecase(ctrl *gomock.Controller) *MockSearchProductsUsecase {
	mock := &MockSearchProductsUsecase{ctrl: ctrl}
	mock.recorder = &MockSearchProductsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchProductsUsecase) EXPECT() *MockSearchProductsUsecaseMockRecorder {
	return m.recorder
}

// SearchProducts mocks base method.
func (m *MockSearchProductsUsecase) SearchProducts(ctx context.Context, in *productinput.SearchProductsInput) (*productoutput.SearchProductsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProducts", ctx, in)
	ret0, _ := ret[0].(*productoutput.SearchProductsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProducts indicates an expected call of SearchProducts.
func (mr *MockSearchProductsUsecaseMockRecorder) SearchProducts(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProducts", reflect.TypeOf((*MockSearchProductsUsecase)(nil).SearchProducts), ctx, in)
}
