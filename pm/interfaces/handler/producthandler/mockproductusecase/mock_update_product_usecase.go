// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/productusecase/update_product_usecase.go

// Package mockproductusecase is a generated GoMock package.
package mockproductusecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	productusecase "github.com/onituka/agile-project-management/project-management/usecase/productusecase"
)

// MockUpdateProductUsecase is a mock of UpdateProductUsecase interface.
type MockUpdateProductUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateProductUsecaseMockRecorder
}

// MockUpdateProductUsecaseMockRecorder is the mock recorder for MockUpdateProductUsecase.
type MockUpdateProductUsecaseMockRecorder struct {
	mock *MockUpdateProductUsecase
}

// NewMockUpdateProductUsecase creates a new mock instance.
func NewMockUpdateProductUsecase(ctrl *gomock.Controller) *MockUpdateProductUsecase {
	mock := &MockUpdateProductUsecase{ctrl: ctrl}
	mock.recorder = &MockUpdateProductUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateProductUsecase) EXPECT() *MockUpdateProductUsecaseMockRecorder {
	return m.recorder
}

// UpdateProduct mocks base method.
func (m *MockUpdateProductUsecase) UpdateProduct(ctx context.Context, in *productusecase.UpdateProductInput) (*productusecase.UpdateProductOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, in)
	ret0, _ := ret[0].(*productusecase.UpdateProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockUpdateProductUsecaseMockRecorder) UpdateProduct(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockUpdateProductUsecase)(nil).UpdateProduct), ctx, in)
}
