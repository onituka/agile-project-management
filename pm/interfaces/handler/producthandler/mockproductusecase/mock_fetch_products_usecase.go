// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/productusecase/fetch_products_usecase.go

// Package mockproductusecase is a generated GoMock package.
package mockproductusecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	productinput "github.com/onituka/agile-project-management/project-management/usecase/productusecase/productinput"
	productoutput "github.com/onituka/agile-project-management/project-management/usecase/productusecase/productoutput"
)

// MockFetchProductsUsecase is a mock of FetchProductsUsecase interface.
type MockFetchProductsUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockFetchProductsUsecaseMockRecorder
}

// MockFetchProductsUsecaseMockRecorder is the mock recorder for MockFetchProductsUsecase.
type MockFetchProductsUsecaseMockRecorder struct {
	mock *MockFetchProductsUsecase
}

// NewMockFetchProductsUsecase creates a new mock instance.
func NewMockFetchProductsUsecase(ctrl *gomock.Controller) *MockFetchProductsUsecase {
	mock := &MockFetchProductsUsecase{ctrl: ctrl}
	mock.recorder = &MockFetchProductsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetchProductsUsecase) EXPECT() *MockFetchProductsUsecaseMockRecorder {
	return m.recorder
}

// FetchProducts mocks base method.
func (m *MockFetchProductsUsecase) FetchProducts(ctx context.Context, in *productinput.FetchProductsInput) (*productoutput.FetchProductsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProducts", ctx, in)
	ret0, _ := ret[0].(*productoutput.FetchProductsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProducts indicates an expected call of FetchProducts.
func (mr *MockFetchProductsUsecaseMockRecorder) FetchProducts(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProducts", reflect.TypeOf((*MockFetchProductsUsecase)(nil).FetchProducts), ctx, in)
}
