// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/productusecase/productqueryservice/product_query_service.go

// Package mockproductqueryservice is a generated GoMock package.
package mockproductqueryservice

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	productoutput "github.com/onituka/agile-project-management/project-management/usecase/productusecase/productoutput"
)

// MockProductQueryService is a mock of ProductQueryService interface.
type MockProductQueryService struct {
	ctrl     *gomock.Controller
	recorder *MockProductQueryServiceMockRecorder
}

// MockProductQueryServiceMockRecorder is the mock recorder for MockProductQueryService.
type MockProductQueryServiceMockRecorder struct {
	mock *MockProductQueryService
}

// NewMockProductQueryService creates a new mock instance.
func NewMockProductQueryService(ctrl *gomock.Controller) *MockProductQueryService {
	mock := &MockProductQueryService{ctrl: ctrl}
	mock.recorder = &MockProductQueryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductQueryService) EXPECT() *MockProductQueryServiceMockRecorder {
	return m.recorder
}

// CountProductsByGroupID mocks base method.
func (m *MockProductQueryService) CountProductsByGroupID(ctx context.Context, groupID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountProductsByGroupID", ctx, groupID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountProductsByGroupID indicates an expected call of CountProductsByGroupID.
func (mr *MockProductQueryServiceMockRecorder) CountProductsByGroupID(ctx, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountProductsByGroupID", reflect.TypeOf((*MockProductQueryService)(nil).CountProductsByGroupID), ctx, groupID)
}

// FetchProducts mocks base method.
func (m *MockProductQueryService) FetchProducts(ctx context.Context, groupID string, limit, offset uint32) ([]*productoutput.ProductOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProducts", ctx, groupID, limit, offset)
	ret0, _ := ret[0].([]*productoutput.ProductOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProducts indicates an expected call of FetchProducts.
func (mr *MockProductQueryServiceMockRecorder) FetchProducts(ctx, groupID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProducts", reflect.TypeOf((*MockProductQueryService)(nil).FetchProducts), ctx, groupID, limit, offset)
}
