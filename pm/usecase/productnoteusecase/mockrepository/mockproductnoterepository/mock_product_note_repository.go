// Code generated by MockGen. DO NOT EDIT.
// Source: domain/productnotedm/product_note_repository.go

// Package mockproductnoterepository is a generated GoMock package.
package mockproductnoterepository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	productdm "github.com/onituka/agile-project-management/project-management/domain/productdm"
	productnotedm "github.com/onituka/agile-project-management/project-management/domain/productnotedm"
)

// MockProductNoteRepository is a mock of ProductNoteRepository interface.
type MockProductNoteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductNoteRepositoryMockRecorder
}

// MockProductNoteRepositoryMockRecorder is the mock recorder for MockProductNoteRepository.
type MockProductNoteRepositoryMockRecorder struct {
	mock *MockProductNoteRepository
}

// NewMockProductNoteRepository creates a new mock instance.
func NewMockProductNoteRepository(ctrl *gomock.Controller) *MockProductNoteRepository {
	mock := &MockProductNoteRepository{ctrl: ctrl}
	mock.recorder = &MockProductNoteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductNoteRepository) EXPECT() *MockProductNoteRepositoryMockRecorder {
	return m.recorder
}

// CreateProductNote mocks base method.
func (m *MockProductNoteRepository) CreateProductNote(ctx context.Context, productNote *productnotedm.ProductNote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductNote", ctx, productNote)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProductNote indicates an expected call of CreateProductNote.
func (mr *MockProductNoteRepositoryMockRecorder) CreateProductNote(ctx, productNote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductNote", reflect.TypeOf((*MockProductNoteRepository)(nil).CreateProductNote), ctx, productNote)
}

// FetchProductNoteByProductIDAndTitle mocks base method.
func (m *MockProductNoteRepository) FetchProductNoteByProductIDAndTitle(ctx context.Context, productID productdm.ProductID, Title productnotedm.Title) (*productnotedm.ProductNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProductNoteByProductIDAndTitle", ctx, productID, Title)
	ret0, _ := ret[0].(*productnotedm.ProductNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProductNoteByProductIDAndTitle indicates an expected call of FetchProductNoteByProductIDAndTitle.
func (mr *MockProductNoteRepositoryMockRecorder) FetchProductNoteByProductIDAndTitle(ctx, productID, Title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProductNoteByProductIDAndTitle", reflect.TypeOf((*MockProductNoteRepository)(nil).FetchProductNoteByProductIDAndTitle), ctx, productID, Title)
}
