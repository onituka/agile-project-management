// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/productnoteusecase/productnotequeryservice/product_note_query_service.go

// Package mockproductnotequeryservice is a generated GoMock package.
package mockproductnotequeryservice

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	productdm "github.com/onituka/agile-project-management/project-management/domain/productdm"
	productnoteoutput "github.com/onituka/agile-project-management/project-management/usecase/productnoteusecase/productnoteoutput"
)

// MockProductNoteQueryService is a mock of ProductNoteQueryService interface.
type MockProductNoteQueryService struct {
	ctrl     *gomock.Controller
	recorder *MockProductNoteQueryServiceMockRecorder
}

// MockProductNoteQueryServiceMockRecorder is the mock recorder for MockProductNoteQueryService.
type MockProductNoteQueryServiceMockRecorder struct {
	mock *MockProductNoteQueryService
}

// NewMockProductNoteQueryService creates a new mock instance.
func NewMockProductNoteQueryService(ctrl *gomock.Controller) *MockProductNoteQueryService {
	mock := &MockProductNoteQueryService{ctrl: ctrl}
	mock.recorder = &MockProductNoteQueryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductNoteQueryService) EXPECT() *MockProductNoteQueryServiceMockRecorder {
	return m.recorder
}

// CountProductNotesByProductID mocks base method.
func (m *MockProductNoteQueryService) CountProductNotesByProductID(ctx context.Context, productID productdm.ProductID) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountProductNotesByProductID", ctx, productID)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountProductNotesByProductID indicates an expected call of CountProductNotesByProductID.
func (mr *MockProductNoteQueryServiceMockRecorder) CountProductNotesByProductID(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountProductNotesByProductID", reflect.TypeOf((*MockProductNoteQueryService)(nil).CountProductNotesByProductID), ctx, productID)
}

// FetchProductNotes mocks base method.
func (m *MockProductNoteQueryService) FetchProductNotes(ctx context.Context, productID productdm.ProductID, limit, offset uint32) ([]*productnoteoutput.ProductNoteOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProductNotes", ctx, productID, limit, offset)
	ret0, _ := ret[0].([]*productnoteoutput.ProductNoteOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProductNotes indicates an expected call of FetchProductNotes.
func (mr *MockProductNoteQueryServiceMockRecorder) FetchProductNotes(ctx, productID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProductNotes", reflect.TypeOf((*MockProductNoteQueryService)(nil).FetchProductNotes), ctx, productID, limit, offset)
}
